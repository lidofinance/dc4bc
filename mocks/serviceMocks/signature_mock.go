// Code generated by MockGen. DO NOT EDIT.
// Source: ./../client/services/signature/signature.go

// Package serviceMocks is a generated GoMock package.
package serviceMocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	dto "github.com/lidofinance/dc4bc/client/api/dto"
	signature "github.com/lidofinance/dc4bc/client/repositories/signature"
	types "github.com/lidofinance/dc4bc/fsm/types"
)

// MockSignatureService is a mock of SignatureService interface.
type MockSignatureService struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureServiceMockRecorder
}

// MockSignatureServiceMockRecorder is the mock recorder for MockSignatureService.
type MockSignatureServiceMockRecorder struct {
	mock *MockSignatureService
}

// NewMockSignatureService creates a new mock instance.
func NewMockSignatureService(ctrl *gomock.Controller) *MockSignatureService {
	mock := &MockSignatureService{ctrl: ctrl}
	mock.recorder = &MockSignatureServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignatureService) EXPECT() *MockSignatureServiceMockRecorder {
	return m.recorder
}

// GetBatches mocks base method.
func (m *MockSignatureService) GetBatches(dto *dto.DkgIdDTO) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatches", dto)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatches indicates an expected call of GetBatches.
func (mr *MockSignatureServiceMockRecorder) GetBatches(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatches", reflect.TypeOf((*MockSignatureService)(nil).GetBatches), dto)
}

// GetSignatureByID mocks base method.
func (m *MockSignatureService) GetSignatureByID(dto *dto.SignatureByIdDTO) ([]types.ReconstructedSignature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignatureByID", dto)
	ret0, _ := ret[0].([]types.ReconstructedSignature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignatureByID indicates an expected call of GetSignatureByID.
func (mr *MockSignatureServiceMockRecorder) GetSignatureByID(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignatureByID", reflect.TypeOf((*MockSignatureService)(nil).GetSignatureByID), dto)
}

// GetSignatures mocks base method.
func (m *MockSignatureService) GetSignatures(dto *dto.DkgIdDTO) (signature.SignaturesStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignatures", dto)
	ret0, _ := ret[0].(signature.SignaturesStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignatures indicates an expected call of GetSignatures.
func (mr *MockSignatureServiceMockRecorder) GetSignatures(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignatures", reflect.TypeOf((*MockSignatureService)(nil).GetSignatures), dto)
}

// GetSignaturesByBatchID mocks base method.
func (m *MockSignatureService) GetSignaturesByBatchID(dto *dto.SignaturesByBatchIdDTO) (map[string][]types.ReconstructedSignature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignaturesByBatchID", dto)
	ret0, _ := ret[0].(map[string][]types.ReconstructedSignature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignaturesByBatchID indicates an expected call of GetSignaturesByBatchID.
func (mr *MockSignatureServiceMockRecorder) GetSignaturesByBatchID(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignaturesByBatchID", reflect.TypeOf((*MockSignatureService)(nil).GetSignaturesByBatchID), dto)
}

// SaveSignatures mocks base method.
func (m *MockSignatureService) SaveSignatures(signature []types.ReconstructedSignature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSignatures", signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSignatures indicates an expected call of SaveSignatures.
func (mr *MockSignatureServiceMockRecorder) SaveSignatures(signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSignatures", reflect.TypeOf((*MockSignatureService)(nil).SaveSignatures), signature)
}
