// Code generated by MockGen. DO NOT EDIT.
// Source: ./../client/services/fsmservice/fsmservice.go

// Package serviceMocks is a generated GoMock package.
package serviceMocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	dto "github.com/lidofinance/dc4bc/client/api/dto"
	state_machines "github.com/lidofinance/dc4bc/fsm/state_machines"
)

// MockFSMService is a mock of FSMService interface.
type MockFSMService struct {
	ctrl     *gomock.Controller
	recorder *MockFSMServiceMockRecorder
}

// MockFSMServiceMockRecorder is the mock recorder for MockFSMService.
type MockFSMServiceMockRecorder struct {
	mock *MockFSMService
}

// NewMockFSMService creates a new mock instance.
func NewMockFSMService(ctrl *gomock.Controller) *MockFSMService {
	mock := &MockFSMService{ctrl: ctrl}
	mock.recorder = &MockFSMServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFSMService) EXPECT() *MockFSMServiceMockRecorder {
	return m.recorder
}

// GetFSMDump mocks base method.
func (m *MockFSMService) GetFSMDump(dto *dto.DkgIdDTO) (*state_machines.FSMDump, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFSMDump", dto)
	ret0, _ := ret[0].(*state_machines.FSMDump)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFSMDump indicates an expected call of GetFSMDump.
func (mr *MockFSMServiceMockRecorder) GetFSMDump(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFSMDump", reflect.TypeOf((*MockFSMService)(nil).GetFSMDump), dto)
}

// GetFSMInstance mocks base method.
func (m *MockFSMService) GetFSMInstance(dkgRoundID string, createIfMissing bool) (*state_machines.FSMInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFSMInstance", dkgRoundID, createIfMissing)
	ret0, _ := ret[0].(*state_machines.FSMInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFSMInstance indicates an expected call of GetFSMInstance.
func (mr *MockFSMServiceMockRecorder) GetFSMInstance(dkgRoundID, createIfMissing interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFSMInstance", reflect.TypeOf((*MockFSMService)(nil).GetFSMInstance), dkgRoundID, createIfMissing)
}

// GetFSMList mocks base method.
func (m *MockFSMService) GetFSMList() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFSMList")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFSMList indicates an expected call of GetFSMList.
func (mr *MockFSMServiceMockRecorder) GetFSMList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFSMList", reflect.TypeOf((*MockFSMService)(nil).GetFSMList))
}

// ResetFSMState mocks base method.
func (m *MockFSMService) ResetFSMState(dto *dto.ResetStateDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetFSMState", dto)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetFSMState indicates an expected call of ResetFSMState.
func (mr *MockFSMServiceMockRecorder) ResetFSMState(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFSMState", reflect.TypeOf((*MockFSMService)(nil).ResetFSMState), dto)
}

// SaveFSM mocks base method.
func (m *MockFSMService) SaveFSM(dkgRoundID string, dump []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFSM", dkgRoundID, dump)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFSM indicates an expected call of SaveFSM.
func (mr *MockFSMServiceMockRecorder) SaveFSM(dkgRoundID, dump interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFSM", reflect.TypeOf((*MockFSMService)(nil).SaveFSM), dkgRoundID, dump)
}
