// Code generated by MockGen. DO NOT EDIT.
// Source: ./../client/repositories/operation/operation.go

// Package repoMocks is a generated GoMock package.
package repoMocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	types "github.com/lidofinance/dc4bc/client/types"
)

// MockOperationRepo is a mock of OperationRepo interface.
type MockOperationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOperationRepoMockRecorder
}

// MockOperationRepoMockRecorder is the mock recorder for MockOperationRepo.
type MockOperationRepoMockRecorder struct {
	mock *MockOperationRepo
}

// NewMockOperationRepo creates a new mock instance.
func NewMockOperationRepo(ctrl *gomock.Controller) *MockOperationRepo {
	mock := &MockOperationRepo{ctrl: ctrl}
	mock.recorder = &MockOperationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationRepo) EXPECT() *MockOperationRepoMockRecorder {
	return m.recorder
}

// DeleteOperation mocks base method.
func (m *MockOperationRepo) DeleteOperation(operation *types.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperation", operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOperation indicates an expected call of DeleteOperation.
func (mr *MockOperationRepoMockRecorder) DeleteOperation(operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperation", reflect.TypeOf((*MockOperationRepo)(nil).DeleteOperation), operation)
}

// GetOperationByID mocks base method.
func (m *MockOperationRepo) GetOperationByID(operationID string) (*types.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationByID", operationID)
	ret0, _ := ret[0].(*types.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationByID indicates an expected call of GetOperationByID.
func (mr *MockOperationRepoMockRecorder) GetOperationByID(operationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationByID", reflect.TypeOf((*MockOperationRepo)(nil).GetOperationByID), operationID)
}

// GetOperations mocks base method.
func (m *MockOperationRepo) GetOperations() (map[string]*types.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations")
	ret0, _ := ret[0].(map[string]*types.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations.
func (mr *MockOperationRepoMockRecorder) GetOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockOperationRepo)(nil).GetOperations))
}

// PutOperation mocks base method.
func (m *MockOperationRepo) PutOperation(operation *types.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutOperation", operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutOperation indicates an expected call of PutOperation.
func (mr *MockOperationRepoMockRecorder) PutOperation(operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOperation", reflect.TypeOf((*MockOperationRepo)(nil).PutOperation), operation)
}
